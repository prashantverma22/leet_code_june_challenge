class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = nums.size();
        if(n==0){
            return {};
        }
        sort(nums.begin(), nums.end());
        vector<int> dp(n,1);
        vector<int> prev_index(n, -1);
        int maxIndex=0;
        for(int i=1; i<n; i++)
        {
            for(int j=0; j<i; j++)
            {
                if(nums[i] % nums[j] == 0 && dp[i] < dp[j] + 1)
                {
                    dp[i] = dp[j] + 1;
                    prev_index[i] = j;
                }
            }
            if(dp[i] > dp[maxIndex]){
                maxIndex = i;
            }
        }
        vector<int> answer;
        int t = maxIndex;
        while(t >= 0)
        {
            answer.push_back(nums[t]);
            t = prev_index[t];
        }
        return answer;
   }
};