class RandomizedSet {
    vector<int> arr; //to store duplicate elements
    unordered_map<int,int> m;  // accountable for elements in the data structure
public:
    /** Initialize your data structure here. */
    RandomizedSet() {
        
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
       if(m.find(val) != m.end()){   //if the value is present
           return false;
       }
        arr.push_back(val);
        m.insert({val, arr.size()-1});
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if(m.find(val) == m.end()){   // if the value is not present
            return false; 
        }
        int pos = m[val];   // store it in a variable 
        arr[pos] = arr[arr.size()-1];
        m[arr[pos]] = pos;  // update it in the map
        arr.pop_back();   
        m.erase(val); // delete the value
        return true;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        return arr[rand() % arr.size()];   // returna a random value
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */